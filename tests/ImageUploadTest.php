<?php

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Http\UploadedFile;

class ImageUploadTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */

    use DatabaseTransactions;

    public function testImageRoutes()
    {
        $user = factory(App\User::class)->create();
        $group = factory(App\Group::class)->create();
        $group->addMember($user);
        $group->addOwner($user);
        $file = new UploadedFile(storage_path('testing/image.jpg'), 'image.jpg', filesize(storage_path('testing/image.jpg')), 'image/jpg', null, true);

        //Store Images for user
        $this->json('POST', '/store/image', ['id' => $user->id + 10, 'resource' => 'user', 'image' => $file])->assertResponseStatus(404);
        $this->json('POST', '/store/image', ['id' => $user->id, 'resource' => 'user', 'image' => $file])->assertResponseStatus(201);
        $this->json('POST', '/store/image', ['id' => $user->id, 'resource' => 'USeR', 'image' => $file])->assertResponseStatus(201);
        $this->json('POST', '/store/image', ['id' => $user->id, 'resource' => 'USER', 'image' => $file])->assertResponseStatus(201);
        $this->json('POST', '/store/image', ['id' => $user->id, 'resource' => 'uSER', 'image' => $file])->assertResponseStatus(201);
        //Store Images for Group
        $this->json('POST', '/store/image', ['id' => $group->id + 10, 'resource' => 'grOUP', 'image' => $file])->assertResponseStatus(404);
        $this->json('POST', '/store/image', ['id' => $group->id, 'resource' => 'group', 'image' => $file])->assertResponseStatus(201);
        $this->json('POST', '/store/image', ['id' => $group->id, 'resource' => 'gROUP', 'image' => $file])->assertResponseStatus(201);
        $this->json('POST', '/store/image', ['id' => $group->id, 'resource' => 'GROUP', 'image' => $file])->assertResponseStatus(201);
        $this->json('POST', '/store/image', ['id' => $group->id, 'resource' => 'groUP', 'image' => $file])->assertResponseStatus(201);
        /*//Store Images for memo
        $this->json('POST', '/store/image', ['id' => 1, 'resource' => 'memo', 'image' => $file])->assertResponseStatus(201);
        $this->json('POST', '/store/image', ['id' => 1, 'resource' => 'MEMO', 'image' => $file])->assertResponseStatus(201);
        $this->json('POST', '/store/image', ['id' => 1, 'resource' => 'memO', 'image' => $file])->assertResponseStatus(201);
        $this->json('POST', '/store/image', ['id' => 1, 'resource' => 'mEMO', 'image' => $file])->assertResponseStatus(201);
        $this->json('POST', '/store/image', ['id' => 1000, 'resource' => 'MEMo', 'image' => $file])->assertResponseStatus(400);
        $this->json('POST', '/store/image', ['id' => 1000, 'resource' => 'M3Mo', 'image' => $file])->assertResponseStatus(400);*/

        $this->get('/retrieve/user/thumbnail/' . $user->id)->assertResponseStatus(200);
        $this->get('/retrieve/user/thumbnail/' . ($user->id + 10))->assertResponseStatus(404);
        $this->get('/retrieve/user/avatar/' . $user->id)->assertResponseStatus(200);
        $this->get('/retrieve/user/avatar/9' . ($user->id + 10))->assertResponseStatus(404);

        $this->get('/retrieve/group/thumbnail/' . $group->id)->assertResponseStatus(200);
        $this->get('/retrieve/group/thumbnail/9' . ($group->id + 10))->assertResponseStatus(404);
        $this->get('/retrieve/group/avatar/' . $group->id)->assertResponseStatus(200);
        $this->get('/retrieve/group/avatar/' . ($group->id + 10))->assertResponseStatus(404);

        /* $this->get('/retrieve/memo/thumbnail/1')->assertResponseStatus(200);
         $this->get('/retrieve/memo/thumbnail/9')->assertResponseStatus(400);
         $this->get('/retrieve/memo/avatar/1')->assertResponseStatus(200);
         $this->get('/retrieve/memo/avatar/9')->assertResponseStatus(400);*/

        $this->get('/delete/user/' . $user->id)->assertResponseStatus(202);
        $this->get('/delete/group/' . $group->id)->assertResponseStatus(202);
        $this->get('/delete/group/' . ($group->id + 10))->assertResponseStatus(404);
        //$this->get('/delete/memo/1')->assertResponseStatus(202);
        //$this->get('/delete/memo/1000')->assertResponseStatus(400);

    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        // Delete files created by tests
        $dir = __DIR__ . '/../storage/app/';
        $di = new RecursiveDirectoryIterator($dir, FilesystemIterator::SKIP_DOTS);
        $ri = new RecursiveIteratorIterator($di, RecursiveIteratorIterator::CHILD_FIRST);
        foreach ($ri as $file) {
            $file->isDir() ? rmdir($file) : unlink($file);
        }
    }
}
